
function smallDet(M::SMatrix{2,2,Float64,4})
	@inbounds return (M[1,1]*M[2,2] - M[1,2]*M[2,1])
end
function smallDet(M::SMatrix{3,3,Float64,9})
	@inbounds return (M[1,1]*(M[2,2]*M[3,3]-M[2,3]*M[3,2]) - M[1,2]*(M[2,1]*M[3,3]-M[2,3]*M[3,1]) + M[1,3]*(M[2,1]*M[3,2]-M[2,2]*M[3,1]))
end

function Blin0(::Type{Tri{2, 3, NIPs, 6}}, gradN::SMatrix{3,2,Float64,6}) where {NIPs}
    return @SMatrix [
        gradN[1,1]  0.0        gradN[2,1]  0.0        gradN[3,1]  0.0
        0.0         gradN[1,2] 0.0         gradN[2,2] 0.0         gradN[3,2]
        gradN[1,2]  gradN[1,1] gradN[2,2]  gradN[2,1] gradN[3,2]  gradN[3,1]
    ]
end
function Blin0(::Type{Tri{2,6,NIPs,12}}, gradN::SMatrix{6,2,Float64,12}) where {NIPs}
    return @SMatrix [
        gradN[1,1]  0.0        gradN[2,1]  0.0        gradN[3,1]  0.0 			gradN[4,1]  0.0        gradN[5,1]  0.0        gradN[6,1]  0.0	
        0.0         gradN[1,2] 0.0         gradN[2,2] 0.0         gradN[3,2]	0.0         gradN[4,2] 0.0         gradN[5,2] 0.0         gradN[6,2]
        gradN[1,2]  gradN[1,1] gradN[2,2]  gradN[2,1] gradN[3,2]  gradN[3,1]	gradN[4,2]  gradN[4,1] gradN[5,2]  gradN[5,1] gradN[6,2]  gradN[6,1]
    ]
end

function MaterialStiffness(::Type{Val{2}}, E, ŒΩ)
	fac = E/((1+ŒΩ)*(1-2*ŒΩ))
	return fac*SMatrix{3,3,Float64,9}(1-ŒΩ,ŒΩ,0.,ŒΩ,1-ŒΩ,0.,0.,0.,(1-2*ŒΩ)/2.0)
end

function response(Œµtr, Œµpl, ŒîT=0.0)
	E = 1e6
	ŒΩ = 0.25
	‚ÑÇ = MaterialStiffness(Val{2}, E, ŒΩ)
	Œ±T = SVector{3,Float64}(1e-5,1e-5,0.0)    
	return œÉtr = ‚ÑÇ * (Œµtr - Œµpl - Œ±T.*ŒîT), Œµpl
end

using LinearAlgebra, StaticArrays

function _response(Œµtr::SVector{3,Float64}, Œµpl::SVector{3,Float64}, ŒîT=0.0)
    # Materialparameter
    E = 2.1e11
    ŒΩ = 0.3
    œÉy = 200.0
    G  = E / (2*(1+ŒΩ))

    # 2D Elastizit√§tsmatrix (plane strain)
    ‚ÑÇ = MaterialStiffness(Val{2}, E, ŒΩ)
    Œ±T = SVector{3,Float64}(1e-5,1e-5,0.0)

    # Trialspannung
    œÉtr = ‚ÑÇ * (Œµtr - Œµpl - Œ±T.*ŒîT)

    # Deviatorische Spannung (2D)
    p = (œÉtr[1] + œÉtr[2]) / 3.0
    s = œÉtr .- SVector(p, p, 0.0)

    # Von Mises Spannung
    seq = sqrt(1.5 * (s[1]^2 + s[2]^2 + 2*s[3]^2) / 2)
    #J2 = 0.5 * (s[1]^2 + s[2]^2 + 2*s[3]^2)
    #seq = sqrt(3 * J2)

    f = seq - œÉy

    if f <= 0
        # elastisch
        œÉ = œÉtr
        Œµpltr = Œµpl
    else
        # plastisch
        n = s / (sqrt(s[1]^2 + s[2]^2 + 2*s[3]^2))
        #n = s / sqrt(2 * J2)
        ŒîŒ≥ = f / (3.0*G)  # ohne Verfestigung
        s_new = s - 2G * ŒîŒ≥ * n
        œÉ = s_new .+ SVector(p, p, 0.0)
        Œµpltr = Œµpl .+ ŒîŒ≥ * n
    end

    return œÉ, Œµpltr
end


@generated function grad(f::Function,œÉ::SVector{3,Float64})
	exprs = Vector{Expr}()
	for j = 1:3
		push!(exprs, :((f(œÉ+Œ±s[:,$j])[1]-fœÉ)./h))
	end
	return quote
		h = 10.0^-8
		Œ±s = SMatrix{3,3,Float64,9}(LinearAlgebra.I)*h
		fœÉ = f(œÉ)[1]
		œÉs = $(Expr(:tuple, exprs...))
		return SMatrix{3,3,Float64,9}(œÉs[1]...,œÉs[2]...,œÉs[3]...)
	end
end

function ipStiffness(state, ùêÅ, nodalU, Œµpl, detJ, w, ŒîT=0.0)
	ùêÅtr = transpose(ùêÅ)
	Œµtr = ùêÅ*nodalU
	‚ÑÇnum = grad(x->response(x, Œµpl, ŒîT), Œµtr)
	dVw = detJ*w
	return ùêÅtr*‚ÑÇnum*ùêÅ*dVw
end

function ipRint(state, ùêÅ, detJ, w)
	dVw = detJ*w
	return transpose(ùêÅ)*state.œÉtr*dVw
end

@generated function elStiffness(::Type{Val{NIPs}}, ::Type{Val{NNODES}}, ::Type{Val{DIM}}, state, ùêÅs, nodalU, Œµpls, detJs, wips) where {NIPs,NNODES,DIM}
	DIMTimesNNODES = DIM*NNODES
	DIMTimesNNODESSQ = DIMTimesNNODES*DIMTimesNNODES
	body = Expr(:block)
	for ip in 1:NIPs
		push!(body.args, quote
			Rel += ipRint(state[$ip], ùêÅs[$ip], detJs[$ip], wips[$ip])
            Kel += ipStiffness(state[$ip], ùêÅs[$ip], nodalU, Œµpls[$ip], detJs[$ip], wips[$ip])
		end)
	end
	return quote
		Rel = zero(SVector{$DIMTimesNNODES, Float64})
        Kel = zero(SMatrix{$DIMTimesNNODES,$DIMTimesNNODES,Float64,$DIMTimesNNODESSQ})
        $body
        return Kel, Rel
	end
end

function _elStiffness(el::Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, dofmap, U, shapeFuns, actt) where {DIM, NNODES, NIPs, DIMtimesNNodes}
	dùêçs = shapeFuns.dùêçs
	wips = shapeFuns.wips
	elX0 = el.nodes
	eldofs = dofmap[SVector{DIM,Int}(1:DIM),el.inds][:]
	nodalU = U[eldofs]
	Js = ntuple(ip->elX0*dùêçs[ip], NIPs)
	detJs = ntuple(ip->smallDet(Js[ip]), NIPs)
	@assert all(detJs .> 0) "error: det(J) < 0"
	invJs = ntuple(ip->inv(Js[ip]), NIPs)
	gradùêçs = ntuple(ip->dùêçs[ip]*invJs[ip], NIPs)
	ùêÅs = ntuple(ip->Blin0(Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, gradùêçs[ip]), NIPs)
	if actt == 1
		Œµpls = ntuple(ip->SVector{3,Float64}(0.,0.,0.), NIPs)
	else
		Œµpls = ntuple(ip->el.state.state[ip].Œµpl[actt-1], NIPs)
	end
	return ùêÅs, gradùêçs, nodalU, Œµpls, detJs, wips
end

function elStiffness(el::Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, dofmap, U, shapeFuns, actt) where {DIM, NNODES, NIPs, DIMtimesNNodes}
	ùêÅs, _, nodalU, Œµpls, detJs, wips = _elStiffness(el, dofmap, U, shapeFuns, actt)
	return elStiffness(Val{NIPs}, Val{NNODES}, Val{DIM}, el.state.state, ùêÅs, nodalU, Œµpls, detJs, wips)
end

function ipMass(ùêç, detJ, w)
	dVw = detJ*w
	return ùêç*transpose(ùêç)*dVw
end

@generated function elMass(::Type{Val{NIPs}},::Type{Val{NNODES}}, ùêçs, detJs, wips) where {NIPs,NNODES}
	NNODESSQ = NNODES*NNODES
	body = Expr(:block)
	for ip in 1:NIPs
		push!(body.args, quote
			Me += ipMass(ùêçs[$ip], detJs[$ip], wips[$ip])
		end)
	end
	return quote
        Me = zero(SMatrix{NNODES,NNODES,Float64,$NNODESSQ})
        $body
        return Me
	end
end

function elMass(el::Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, shapeFuns) where {DIM, NNODES, NIPs, DIMtimesNNodes}
	ùêçs = shapeFuns.ùêçs
	dùêçs = shapeFuns.dùêçs
	wips = shapeFuns.wips
	elX0 = el.nodes
	Js = ntuple(ip->elX0*dùêçs[ip], NIPs)
	detJs = ntuple(ip->smallDet(Js[ip]), NIPs)
	@assert all(detJs .> 0) "error: det(J) < 0"
	return elMass(Val{NIPs}, Val{NNODES}, ùêçs, detJs, wips)
end

function elPost(ùêç, vals, detJ, w::Float64)
	dVw = detJ*w
	return ùêç*transpose(vals)*dVw
end

@generated function elPost(::Type{Val{NIPs}}, ::Type{Val{NNODES}}, state, ùêçs, detJs, wips, actt) where {NIPs, NNODES}
	#println(typeof(wips)," ",wips)
	NNODES3 = NNODES*3
	body = Expr(:block)
	for ip in 1:NIPs
		push!(body.args, quote
			œÉe += elPost(ùêçs[$ip], state[$ip].œÉ[actt], detJs[$ip], wips[$ip])
			Œµple += elPost(ùêçs[$ip], state[$ip].Œµpl[actt], detJs[$ip], wips[$ip])
		end)
	end
	return quote
        œÉe = zero(SMatrix{NNODES,3,Float64,$NNODES3})
        Œµple = zero(SMatrix{NNODES,3,Float64,$NNODES3})
        $body
        return œÉe,Œµple
	end
end

function elPost(el::Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, shapeFuns, actt) where {DIM, NNODES, NIPs, DIMtimesNNodes}
	ùêçs = shapeFuns.ùêçs
	dùêçs = shapeFuns.dùêçs
	wips = shapeFuns.wips
	elX0 = el.nodes
	Js = ntuple(ip->elX0*dùêçs[ip], NIPs)
	detJs = ntuple(ip->smallDet(Js[ip]), NIPs)
	@assert all(detJs .> 0) "error: det(J) < 0"
	return elPost(Val{NIPs}, Val{NNODES}, el.state.state, ùêçs, detJs, wips, actt)
end

function updateTrialStates!(::Type{LinearElasticity}, state::IPStateVars2D, ùêÅ, nodalU, actt)
	Œµtr = ùêÅ*nodalU
	Œµpl = actt>1 ? state.Œµpl[actt-1] : zeros(SVector{3,Float64})
	state.œÉtr,state.Œµpltr = response(Œµtr, Œµpl)
	return nothing
end

function updateTrialStates!(::Type{LinearElasticity}, el::Tri{DIM, NNODES, NIPs, DIMtimesNNodes}, dofmap, U, shapeFuns, actt) where {DIM, NNODES, NIPs, DIMtimesNNodes}
	ùêÅs, _, nodalU, _, _, _ = _elStiffness(el, dofmap, U, shapeFuns, actt)
	foreach((ipstate,ùêÅ)->updateTrialStates!(LinearElasticity, ipstate, ùêÅ, nodalU, actt), el.state.state, ùêÅs)
	return nothing
end